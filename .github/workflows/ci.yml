name: CI

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - main
  schedule:
    - cron: '0 10 * * *' # run at 10 AM UTC

jobs:
  changelog:
    name: CHANGELOG
    runs-on: ubuntu-latest
    # Only run this on pull requests.
    if: github.event_name == 'pull_request'

    steps:
    # Note that checkout@v2 will not work with the git command below!
    - uses: actions/checkout@v1

    - name: Check that CHANGELOG has been updated
      run: |
        # If this step fails, this means you haven't updated the CHANGELOG.md
        # file with notes on your contribution.
        git diff --name-only $(git merge-base origin/main HEAD) | grep '^CHANGELOG.md$' && echo "Thanks for helping keep our CHANGELOG up-to-date!"

  build_checks:
    name: ${{ matrix.task.name }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    env:
      RUST_BACKTRACE: full
      RUSTC_WRAPPER: sccache
      RUSTV: ${{ matrix.rust }}
      TARGET: ${{ matrix.target }}
      SCCACHE_CACHE_SIZE: 1G
      SCCACHE_DIR: ${{ matrix.sccache-path }}
      CACHE_PREFIX: v0
      AMQP_ADDR: amqp://127.0.0.1:5672//
      REDIS_ADDR: redis://127.0.0.1:6379/
    services: ${{ matrix.services }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust: [stable]
        task:
          - name: Tests
            run: make test

          - name: Lint
            run: make check-clippy

          - name: Build
            run: make build

        include:
          - os: ubuntu-latest
            rust: stable
            sccache-path: /home/runner/.cache/sccache
            target: x86_64-unknown-linux-musl
            services: {}
            task:
              name: Format
              run: make check-fmt

          - os: ubuntu-latest
            rust: nightly
            sccache-path: /home/runner/.cache/sccache
            target: x86_64-unknown-linux-musl
            services: {}
            task:
              name: Build docs
              run: make build-docs

          - os: ubuntu-latest
            rust: stable
            sccache-path: /home/runner/.cache/sccache
            target: x86_64-unknown-linux-musl
            services:
              rabbitmq:
                image: rabbitmq
                ports:
                  - 5672:5672
              redis:
                image: redis
                ports:
                  - 6379:6379
            task:
              name: Broker tests
              run: make broker-tests

          - os: ubuntu-latest
            sccache-path: /home/runner/.cache/sccache
            target: x86_64-unknown-linux-musl
            services: {}

          - os: macos-latest
            sccache-path: /Users/runner/Library/Caches/Mozilla.sccache
            target: x86_64-apple-darwin
            services: {}
    steps:
      - uses: actions/checkout@v2

      - name: Install sccache (ubuntu-latest)
        if: matrix.os == 'ubuntu-latest'
        env:
          LINK: https://github.com/mozilla/sccache/releases/download
          SCCACHE_VERSION: v0.2.15
        run: |
          SCCACHE_FILE=sccache-$SCCACHE_VERSION-x86_64-unknown-linux-musl
          URL="$LINK/$SCCACHE_VERSION/$SCCACHE_FILE.tar.gz"
          echo "Downloading sccache from $URL"
          mkdir -p $HOME/.local/bin
          curl -L $URL | tar xz
          mv -f $SCCACHE_FILE/sccache $HOME/.local/bin/sccache
          chmod +x $HOME/.local/bin/sccache
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install sccache (macos-latest)
        if: matrix.os == 'macos-latest'
        run: |
          # brew update  # takes forever
          brew install sccache

      - name: Install Rust ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true

      - name: Install Musl Tools
        if: ${{ matrix.target == 'x86_64-unknown-linux-musl' }}
        run: |
          sudo apt install -y musl-tools
          sudo ln -s /usr/bin/musl-gcc /usr/local/bin/x86_64-linux-musl-gcc
          echo "TARGET_CC=musl-gcc" | tee -a $GITHUB_ENV
          rustup target add x86_64-unknown-linux-musl

      - name: Cache cargo registry and sccache
        uses: actions/cache@v2
        continue-on-error: false
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ${{ matrix.sccache-path }}
          key: ${{ env.CACHE_PREFIX }}-${{ runner.os }}-${{ matrix.task.name }}-${{ hashFiles('**/Cargo.toml') }}
          restore-keys: |
            ${{ env.CACHE_PREFIX }}-${{ runner.os }}-${{ matrix.task.name }}-

      - name: Start sccache server
        run: sccache --start-server

      - name: ${{ matrix.task.name }}
        run: ${{ matrix.task.run }}

      - name: Stop sccache server
        run: sccache --stop-server || true

  test_python_example:
    name: Check python example
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Setup Python
      uses: actions/setup-python@v1
      with:
        python-version: 3.7

    - name: Cache pip
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip # This path is specific to Ubuntu
        key: pip ${{ runner.os }} ${{ env.pythonLocation }} ${{ hashFiles('requirements.txt') }} ${{ hashFiles('dev-requirements.txt') }}

    - name: Install requirements
      run: |
        pip install -r requirements.txt -r dev-requirements.txt

    - name: Check formatting
      if: always()
      run: |
        black --check examples/

    - name: Lint
      if: always()
      run: |
        flake8 examples/

    - name: Typecheck
      if: always()
      run: |
        mypy --ignore-missing-imports examples/

  publish_workspace_crates:
    name: Publish ${{ matrix.crate }} crate
    runs-on: ubuntu-latest
    needs: [build_checks, test_python_example]
    if: startsWith(github.ref, 'refs/tags/')
    strategy:
      matrix:
        crate: [celery-codegen]
    steps:
    - uses: actions/checkout@v2

    - name: Install rust stable
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable

    - name: Log in to crates.io
      uses: actions-rs/cargo@v1
      with:
        command: login
        args: ${{ secrets.CARGO_TOKEN }}

    - name: Publish ${{ matrix.crate }} to crates.io
      run: |
        cd ${{ matrix.crate }}
        cargo publish

  publish_celery_crate:
    name: Publish celery crate
    runs-on: ubuntu-latest
    needs: [publish_workspace_crates]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - uses: actions/checkout@v2

    - name: Install rust stable
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable

    - name: Log in to crates.io
      uses: actions-rs/cargo@v1
      with:
        command: login
        args: ${{ secrets.CARGO_TOKEN }}

    - name: Publish celery to crates.io
      run: |
        cargo publish

  publish_github_release:
    name: Publish github release
    runs-on: ubuntu-latest
    needs: [publish_celery_crate]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v1

      - name: Prepare environment
        run: |
          echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV;

      - name: Setup Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.7

      - name: Generate release notes
        run: |
          python scripts/generate_release_notes.py > ${{ github.workspace }}-RELEASE_NOTES.md

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: ${{ github.workspace }}-RELEASE_NOTES.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
